/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto2;

import java.awt.Color;
import java.awt.Component;
import java.util.concurrent.Semaphore;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author allec
 */
public class JFrame extends javax.swing.JFrame {

    static  int nl=0;
    private static Semaphore servicio = new Semaphore(1, true); // Controla el acceso a la región crítica
    private static Semaphore mutex = new Semaphore(1, true);
    private static Semaphore cola_servicio = new Semaphore(1, true);
    DefaultTableModel modelo = new DefaultTableModel();
    DefaultTableModel modelo2 = new DefaultTableModel();
    int cReader;
    int cWriter;

    /**
     * Creates new form JFrame
     */
    public JFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        cReader = 0;
        cWriter = 0;

        modelo.addColumn("No.");
        modelo.addColumn("Estado");
        this.jTableLectores.setModel(modelo);
        jTableLectores.setEnabled(false);
        jTableLectores.setDefaultRenderer(Object.class, new MiRender());

        modelo2.addColumn("No.");
        modelo2.addColumn("Estado");
        this.jTableEscritores.setModel(modelo2);
        jTableEscritores.setEnabled(false);
        jTableEscritores.setDefaultRenderer(Object.class, new MiRender());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonLector = new javax.swing.JButton();
        jButtonEscritor = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableLectores = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEscritores = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonLector.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 14)); // NOI18N
        jButtonLector.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lector1.png"))); // NOI18N
        jButtonLector.setText("+ Lector");
        jButtonLector.setBorder(null);
        jButtonLector.setBorderPainted(false);
        jButtonLector.setContentAreaFilled(false);
        jButtonLector.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonLector.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonLector.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lector2.png"))); // NOI18N
        jButtonLector.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButtonLector.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonLector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLectorActionPerformed(evt);
            }
        });

        jButtonEscritor.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 14)); // NOI18N
        jButtonEscritor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/escritor.png"))); // NOI18N
        jButtonEscritor.setText("+ Escritor");
        jButtonEscritor.setBorder(null);
        jButtonEscritor.setBorderPainted(false);
        jButtonEscritor.setContentAreaFilled(false);
        jButtonEscritor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonEscritor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonEscritor.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/escritor2.png"))); // NOI18N
        jButtonEscritor.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButtonEscritor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonEscritor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEscritorActionPerformed(evt);
            }
        });

        jTableLectores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane1.setViewportView(jTableLectores);

        jTableEscritores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane2.setViewportView(jTableEscritores);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 646, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 18, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(30, 30, 30)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(60, 60, 60)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButtonLector, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonEscritor, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 18, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 328, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 14, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(50, 50, 50)
                            .addComponent(jButtonLector, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(jButtonEscritor, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 14, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLectorActionPerformed
        cReader += 1;
        Lector lector = new Lector();
        lector.start();
        InsertarLector();
    }//GEN-LAST:event_jButtonLectorActionPerformed

    private void jButtonEscritorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEscritorActionPerformed
        cWriter += 1;
        Escritor escritor = new Escritor();
        escritor.start();
        InsertarEscritor();
    }//GEN-LAST:event_jButtonEscritorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEscritor;
    private javax.swing.JButton jButtonLector;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableEscritores;
    private javax.swing.JTable jTableLectores;
    // End of variables declaration//GEN-END:variables
private void InsertarLector() {
        String[] info = new String[2];
        info[0] = "Lector " + cReader;
        info[1] = "Creando...";
        modelo.addRow(info);
    }

    private void InsertarEscritor() {
        String[] info = new String[2];
        info[0] = "Escritor " + cWriter;
        info[1] = "Creando...";
        modelo2.addRow(info);
    }

    public class Lector extends Thread {

        @Override
        public void run() {
            try {
//              Entra a las regiones críticas
                cola_servicio.acquire(); // Entrar a la región crítica de la cola de servicios para agregar un nuevo lector
                mutex.acquire(); // Entrar a la región crítica del semáforo de lectores para aumentar la cuenta
                nl++; // Se aumenta el número de lectores activos
                if (nl == 1) {
                    servicio.acquire();
                }
                cola_servicio.release();
                mutex.release();
//              En esta parte se hace ingreso a la región crítica
//              Se realiza la lectura
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                cReader += 1;
                int fila = cReader - 1;
//              Sale de las regiones críticas
                mutex.acquire();
                nl--;
                if (nl == 0) {
                    servicio.release();
                }
                mutex.release();
            } catch (InterruptedException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void hiloChange( int fila){
        modelo2.setValueAt(("Ejecutandose..."), fila, 1);
        try {
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        modelo2.setValueAt(("Murio"), fila, 1);
    }
    public class Escritor extends Thread {

        @Override
        public void run() {
            try {
//              Entra a las regiones críticas
                cola_servicio.acquire();
                servicio.acquire();
                cola_servicio.release();
//              En esta parte se hace ingreso a la región crítica
//              Se realiza la escritura
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                cWriter += 1;
                int fila = cWriter - 1;
                hiloChange(fila);
//              Sale de las regiones críticas
                servicio.release();
            } catch (InterruptedException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public class MiRender extends DefaultTableCellRenderer {

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
//            System.out.println("s" + value.toString());
            if (value.toString().equals("Ejecutandose...") && column == 1) {
                this.setOpaque(true);
                this.setBackground(Color.WHITE);
                this.setForeground(Color.GREEN);
            } else if (value.toString().equals("Murio") && column == 1) {
                this.setBackground(Color.BLACK);
                this.setForeground(Color.RED);
            } else {
                this.setBackground(Color.WHITE);
                this.setForeground(Color.BLACK);
            }
            return this;
        }
    }

}
